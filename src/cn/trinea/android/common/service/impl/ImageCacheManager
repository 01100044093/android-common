/**
	 * 图片缓存管理，有两级缓存，第一级为 本地图片文件与内存的缓存，第二层结合ImageSDCardCacheManager，为网络与本地文件之间的缓存。
	 */
	public class ImageCacheManager{
		private  final ImageCache IMAGE_CACHE = new ImageCache(128);
		private Context context;
		
		private ImageSDCardCacheManager imgSDCardCacheManager;

		public ImageCacheManager(Context ctx){
			context = ctx;
			imgSDCardCacheManager = new ImageSDCardCacheManager();
	        OnImageCallbackListener imageCallBack = new OnImageCallbackListener() {
	            private static final long serialVersionUID = 1L;
	            @Override
	            public void onImageLoaded(String imageUrl, Drawable imageDrawable, View view, boolean isInCache) {
	                if (view != null && imageDrawable != null) {
	                    ImageView imageView = (ImageView)view;
	                    imageView.setImageDrawable(imageDrawable);
	                    if (!isInCache) {
	                        imageView.startAnimation(getInAlphaAnimation(2000));
	                    }
	                }
	            }
	        };
	        IMAGE_CACHE.setOnImageCallbackListener(imageCallBack);
	        IMAGE_CACHE.setCacheFullRemoveType(new RemoveTypeLastUsedTimeFirst<Drawable>());
	        IMAGE_CACHE.setHttpReadTimeOut(10000);
	        IMAGE_CACHE.setOpenWaitingQueue(true);
	        IMAGE_CACHE.setValidTime(-1);
	        IMAGE_CACHE.setOnGetDataListener(new OnGetDataListener<String, Drawable>(){
				private static final long serialVersionUID = -3015419170577770764L;
				@Override
				public CacheObject<Drawable> onGetData(String key) {
					 	Drawable d = null;
		                try {
		                    CacheObject<String> cs = imgSDCardCacheManager.getImgCache().getOnGetDataListener().onGetData(key);
		                    String filepath = cs.getData();
		                    Bitmap bm = BitmapFactory.decodeFile(filepath,null);
		                    d = new BitmapDrawable(context.getResources(),bm);
		                    Log.d("test","file_path:"+filepath);
		                } catch (Exception e) {
		                    Log.e("test", "get drawable exception, imageUrl is:" + key, e);
		                }
		                return (d == null ? null : new CacheObject<Drawable>(d));
				}});
		}
	    public AlphaAnimation getInAlphaAnimation(long durationMillis) {
	        AlphaAnimation inAlphaAnimation = new AlphaAnimation(0, 1);
	        inAlphaAnimation.setDuration(durationMillis);
	        return inAlphaAnimation;
	    }
		public ImageCache getImgCache(){
			return IMAGE_CACHE;
		}
	    
		/**
		 * 图片缓存管理，这一层只负责网络和本地图片之间的缓存
		 * @author maxiaohui
		 *
		 */
		private class ImageSDCardCacheManager {
		    public final ImageSDCardCache IMAGE_SD_CACHE = new ImageSDCardCache();
		    public ImageSDCardCacheManager(){
		        IMAGE_SD_CACHE.setCacheFullRemoveType(new RemoveTypeLastUsedTimeFirst<String>());
		        IMAGE_SD_CACHE.setCacheFolder(Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + "TrineaAndroidCommon");
		        //IMAGE_SD_CACHE.setCacheFolder(Environment.getDataDirectory() + File.separator + "TrineaAndroidCommon");
		        IMAGE_SD_CACHE.setFileNameRule(new FileNameRuleImageUrl());
		        IMAGE_SD_CACHE.setHttpReadTimeOut(10000);
		        IMAGE_SD_CACHE.setOpenWaitingQueue(true);
		        IMAGE_SD_CACHE.setValidTime(-1);
		        IMAGE_SD_CACHE.setOnGetDataListener(new OnGetDataListener<String, String>(){
					private static final long serialVersionUID = 1L;
					@Override
					public CacheObject<String> onGetData(String key) {
						/**
		            	 * local file cache
		            	 * @author maxiaohui
		            	 */
						String TAG = "test";
						Log.d("test","哈哈哈哈哈！！！");
		            	String imgPath =  IMAGE_SD_CACHE.getCacheFolder() + File.separator + IMAGE_SD_CACHE.getFileNameRule().getFileName(key);
		            	File img = new File(imgPath);
		            	if(img.exists()){
		            		return new CacheObject<String>(imgPath);
		            	}
		            	//below is the same as ImageSDCardCache.getDefaultOnGetImageListener()
		                String savePath = null;
		                try {
		                    InputStream stream = ImageUtils.getInputStreamFromUrl(key, IMAGE_SD_CACHE.getHttpReadTimeOut());
		                    if (stream != null) {
		                        savePath = IMAGE_SD_CACHE.getCacheFolder() + File.separator + IMAGE_SD_CACHE.getFileNameRule().getFileName(key);
		                        try {
		                            FileUtils.writeFile(savePath, stream);
		                        } catch (Exception e) {
		                            if (e.getCause() instanceof FileNotFoundException) {
		                                FileUtils.makeFolders(savePath);
		                                FileUtils.writeFile(savePath, stream);
		                            } else {
		                                Log.e(TAG,new StringBuilder().append("get drawable exception while write to file, imageUrl is: ")
		                                                         .append(key).append(", savePath is ").append(savePath)
		                                                         .toString(), e);
		                                savePath = null;
		                            }
		                        }
		                    }
		                } catch (Exception e) {
		                    Log.e(TAG, new StringBuilder().append("get drawable exception, imageUrl is:").append(key).toString(), e);
		                }
		                return (StringUtils.isEmpty(savePath) ? null : new CacheObject<String>(savePath));
					}});
		    }
		    public ImageSDCardCache getImgCache(){
		    	return IMAGE_SD_CACHE;
		    }
		}
	}
